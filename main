// Phillip Mantatsky 2/10/25
// project creates basic peg game with two boards, one being the changing board
// the other being the "coordinates" basically how the user can change it
// peg game allows user to jump pegs over other pegs to land on a '.'
// if the pegs are too far away the jump won't work
// if the user inputs letters not on the board the project asks for reinupt.

#include <iostream>

using namespace std;

int row(char peg);
int col(char peg);

// initializes each peg
char pegA = '.';
char pegB = 'T';
char pegC = 'T';
char pegD = 'T';
char pegE = 'T';
char pegF = 'T';
char pegG = 'T';
char pegH = 'T';
char pegI = 'T';
char pegJ = 'T';
char pegK = 'T';
char pegL = 'T';
char pegM = 'T';
char pegN = 'T';
char pegO = 'T';

// returns exactly what's at each peg
char& getPeg(char letter) {
	switch(letter) {
		case 'A': return pegA;
		case 'B': return pegB;
		case 'C': return pegC;
		case 'D': return pegD;
		case 'E': return pegE;
		case 'F': return pegF;
		case 'G': return pegG;
		case 'H': return pegH;
		case 'I': return pegI;
		case 'J': return pegJ;
		case 'K': return pegK;
		case 'L': return pegL;
		case 'M': return pegM;
		case 'N': return pegN;
		case 'O': return pegO;
		default : cout << "Invalid peg letter" << endl;
		break;
	}
}

// creates the game using 'T' and alphabet
void makeBoard() {
	int count = 4;
	int space = 12;
	cout << endl;
	cout << string(count, ' ') << pegA << string(space, ' ') << "A" << endl;
	count--;
	space -= 2;
	cout << string(count, ' ') << pegB << " " << pegC << string(space, ' ') << "B" << " " << "C" << endl;
	count--;
	space -= 2;
	cout << string(count, ' ') << pegD << " " << pegE << " " << pegF << string(space, ' ') << "D" << " " << "E" << " " << "F" << endl;
	count--;
	space -= 2;
	cout << string(count, ' ') << pegG << " " << pegH << " " << pegI << " " << pegJ << string(space, ' ') << "G" << " " << "H" << " " << "I" << " " << "J" << endl;
	count--;
	space -= 2;
	cout << string(count, ' ') << pegK << " " << pegL << " " << pegM << " " << pegN << " " << pegO << string(space, ' ') << "K" << " " << "L" << " " << "M" << " " << "N" << " " << "O" << endl;
}

// checks if the move can be made and then changes the board
void makeMove(char start, char jump, char end) {
	int startRow = row(start);
	int jumpRow = row(jump);
	int endRow = row(end);
	int startCol = col(start);
	int jumpCol = col(jump);
	int endCol = col(end);
	int directionR = endRow - startRow;
	int directionC = endCol - startCol;

	bool validDirection = (directionR == -2 && directionC == -2) || 
	(directionR == -2 && directionC == 0) || 
	(directionR == 0 && directionC == -2) || 
	(directionR == 0 && directionC == 2) ||
	(directionR == 2 && directionC == 2) ||
	(directionR == 2 && directionC == 0);


	bool isValidMidpoint = (jumpRow == (startRow + endRow) / 2) && (jumpCol == (startCol + endCol) / 2);

	string nextMove = "";
	char &startPeg = getPeg(start);
	char &jumpPeg = getPeg(jump);
	char &endPeg = getPeg(end);
	if (startPeg == 'T' && jumpPeg == 'T' && endPeg == '.' && isValidMidpoint && validDirection) {
		startPeg = '.';
		jumpPeg = '.';
		endPeg = 'T';
	}
	else {
		cout << "Move is not valid. Try again." << endl;
	}
}

// checks if the last peg is remaining then prints win
bool gameWin() {
	int count = 0;
	if (pegA == 'T') count++;
	if (pegB == 'T') count++;
	if (pegC == 'T') count++;
	if (pegD == 'T') count++;
	if (pegE == 'T') count++;
	if (pegF == 'T') count++;
	if (pegG == 'T') count++;
	if (pegH == 'T') count++;
	if (pegI == 'T') count++;
	if (pegJ == 'T') count++;
	if (pegK == 'T') count++;
	if (pegL == 'T') count++;
	if (pegM == 'T') count++;
	if (pegN == 'T') count++;
	if (pegO == 'T') count++;
	return (count == 1);
}

int main() {
	string move = "";
	while (true) {
		if (gameWin()) {
			cout << "You win! Congratulations!" << endl;
			break;
		}

		makeBoard();
		cout << "Enter move (for example FCA) or Q to quit: " << endl;
		cin >> move;
		if (move == "Q") {
			break;
		}

		if (move.length() != 3) {
			cout << "Move is not valid. Try again." << endl;
			continue;
		}
		bool isValidInput = true;
		// checks if user inputted between a-o
		for (int i = 0; i < 3; i++) {
			if (move.at(i) < 'A' || move.at(i) > 'O') {
				isValidInput = false;
				break;
			}
		}
		if (!isValidInput) {
			cout << "Move is not valid. Try again." << endl;
			continue;
		}
		makeMove(move.at(0), move.at(1), move.at(2));
	}
}




// row returns the row of the given peg location
// Parameter peg is a character, with the letter of the peg (A-O)
// Letter should be upper case, between A and O
// Returns the row (1 through 5). 
// Row 1 is the top row (with one peg), row 5 is the bottom (with 5 pegs)
int row(char peg) {
	if (peg >= 'K') {
		return 5;
	}
	else if (peg >= 'G') {
		return 4;
	}
	else if (peg >= 'D') {
		return 3;
	}
	else if (peg >= 'B') {
		return 2;
	}
	else if (peg == 'A') {
		return 1;
	}
	else {
		cout << "Error - row: Invalid peg: " << peg << endl;
		return -1;
	}
}

// col returns the column of the given peg location
// Parameter peg is a character, with the letter of the peg (A-O)
// Letter should be upper case, between A and O
// Returns the column (1 through 5). 
// At each level, the first letter is column 1, the second letter is column 2, etc.
int col(char peg) {
	if (peg >= 'K') {
		return peg - 'K' + 1;
	}
	else if (peg >= 'G') {
		return peg - 'G' + 1;
	}
	else if (peg >= 'D') {
		return peg - 'D' + 1;
	}
	else if (peg >= 'B') {
		return peg - 'B' + 1;
	}
	else if (peg == 'A') {
		return 1;
	}
	else {
		cout << "Error - col: Invalid peg: " << peg << endl;
		return -1;
	}
}
